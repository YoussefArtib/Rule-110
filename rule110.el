(defconst cols 100)
(defvar row (make-vector cols 0))
(defvar pattern (vector 0 1 1 1 0 1 1 0))

(defmacro get-pattern-index (i)
  `(logior
   (logior
    (lsh (aref row (- ,i 1)) 2)
    (lsh (aref row ,i) 1)
    )
   (lsh (aref row (+ ,i 1)) 0)
   )
  )

(defun randomize-row ()
  (let ((i 0))
    (while (< i cols)
      (aset row i (random 2))
      (setq i (+ i 1))
      )
    )
  )

(defun print-row ()
  (let ((i 0))
    (while (< i cols)
      (if (= (aref row i) 1)
	  (princ "O" standard-output)
	(princ "." standard-output))
      (setq i (+ i 1))
      )
    )
  (princ "\n" standard-output)
  )

(defun next-gen ()
  (let ((next-row (copy-sequence row)))
  (let ((i 1))
    (while (< i (- cols 1))
      (aset next-row i (aref pattern (get-pattern-index i)))
      (setq i (+ i 1))
    )
  (setq row (copy-sequence next-row))
  )))

(defun main ()
  (randomize-row)
  (let ((number-iter 50))
   (let ((i 0))
    (while (< i number-iter)
      (print-row)
      (next-gen)
      (setq i (+ i 1))
      )
    ))
  )

(main)
